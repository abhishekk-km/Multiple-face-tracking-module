

import cv2
import mediapipe as mp
import time

class FaceTracker:
    def __init__(self):
        self.cap = cv2.VideoCapture(0)
        self.pTime = 0
        self.mpFaceDetection = mp.solutions.face_detection
        self.mpDraw = mp.solutions.drawing_utils
        self.faceDetection = self.mpFaceDetection.FaceDetection()
        self.face_trackers = {}

    def run(self):
        while True:
            success, img = self.cap.read()
            imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

            results = self.faceDetection.process(imgRGB)
            if results.detections:
                for id, detection in enumerate(results.detections):
                    ih, iw, ic = img.shape
                    bboxC = detection.location_data.relative_bounding_box
                    bbox = int(bboxC.xmin * iw), int(bboxC.ymin * ih), int(bboxC.width * 1.6 * ih), int(bboxC.height * ih)

                    matched_fid = None
                    min_distance = float('inf')
                    for fid, (x, y, w, h) in self.face_trackers.items():
                        distance = ((x - bbox[0]) ** 2 + (y - bbox[1]) ** 2) ** 0.5
                        if distance < min_distance:
                            min_distance = distance
                            matched_fid = fid

                    if matched_fid is None:
                        print("Creating new tracker", len(self.face_trackers))
                        self.face_trackers[len(self.face_trackers)] = bbox
                    else:
                        self.face_trackers[matched_fid] = bbox

                    cv2.rectangle(img, (bbox[0], bbox[1]), (bbox[0] + bbox[2], bbox[1] + bbox[3]), (0, 255, 0), 2)
                    cv2.putText(img, f'Recognition:{int(detection.score[0] * 100)}%',
                                (bbox[0], bbox[1] - 20), cv2.FONT_HERSHEY_PLAIN,
                                2, (0, 0, 0), 2)

                    for fid, (x, y, w, h) in self.face_trackers.items():
                        if (x, y, w, h) == bbox:
                            cv2.putText(img, f'Face {id+1}', (x, y - 40), cv2.FONT_HERSHEY_PLAIN,
                                        2, (0, 0, 0), 2)

            cTime = time.time()
            fps = 1 / (cTime - self.pTime)
            self.pTime = cTime
            cv2.putText(img, f'FPS:{int(fps)}', (20, 70), cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 255), 2)
            cv2.imshow("Window", img)
            cv2.waitKey(1)

            if cv2.waitKey(1) & 0xFF == ord('q'):
                self.cap.release()
                cv2.destroyAllWindows()
                break

if __name__ == "__main__":
    tracker = FaceTracker()
    tracker.run()